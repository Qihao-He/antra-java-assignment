/**
 * @Author: Qihao He
 * @Date: 1/3/2019
 */
Assignment 2
1.	Why we need packages in java?
	For better organizing different class categories, better team work and easier management,
	minimize the class scopes of different packages for better performance.

2.	What is the default imported package?
	java.lang is the default imported package.

3.	What is Class? What is Object?
	Class is type of the Object, it is like a blueprint. 
	Every Object created using the class should follow the class settings(blueprint).
	Object is an instance of the class that is created.

4.	Why we need constructor?
	We need constructor to instanciate(new) a class, that creates a instance on heap.

5.	What is the default value of local variable? What is the default value of instance variable?
	Local variable cannot be left uninitialized, it will have compilation error.
	Instance variable if it is primitive type, it will be default as 0, false, null if not initialized.

6.	What is garbage collection?
	It is a mechanism that exists in Java service that cleans up memory space. 
	It will check if a instance is no longer referenced by any reference. It will remove the instance.

7.	The protected data can be accessed by subclasses or same package. True or false?
	True.

8.	What is immutable class?
	Immutable class is that a instance of that class, once created, cannot be overwritten.	
	String is a immutable class, once a String instance is created, 
	there is no way to change the instance value.

9.	What’s the difference between “==” and equals method?
	"==": compare the values in the internpool, also used for comparing memeory address.
	equals(): it is comparing the values set in compare() method.

10.	What is wrapper class?
	A Wrapper class is a class whose object wraps or contains a primitive data types. 
	When we create an object to a wrapper class, it contains a field and in this field, 
	we can store a primitive data types. 
	In other words, we can wrap a primitive value into a wrapper class object.

11.	What is autoboxing?
	Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and 
	their corresponding object wrapper classes. For example, converting an int to an Integer, 
	a double to a Double, and so on. If the conversion goes the other way, this is called unboxing.

12.	StringBuilder is threadsafe but slower than StringBuffer, true or false?
	False, StringBuilder is unsynchronized (not thread safe), StringBuffer is synchronized (thread safe), 
	StringBuilder is faster than StringBuffer because it's not synchronized.

	
13.	Constructor can be inherited, true or false?
	Constructors are not members, so they are not inherited by subclasses, 
	but the constructor of the superclass can be invoked from the subclass.

14.	How to call a super class’s constructor?
/**
 * @Author: Qihao He
 * @Date: 1/3/2019
 * super()
 */
public class Vehicle {
	int wheels;

	public Vehicle(int wheels) {
		this.wheels = wheels;
	} 
}

public class car extends Vehicle {
	int wheels;

	public Car(int wheels) {
		super(wheels);
		this.wheels = wheels;
	}
} 
	

15.	Which class is the super class of all classes?
	lang.Object class

16.	Create a program to count how many files/folders are there inside one folder.
	* the count method should take a parameter called Criteria like this: count(Criteria criteria){}
	* For Criteria class, multiple conditions should be included such as: 
		folder path, 
		includeSubFolder or not, 
		the extension of the file be counted and so on. 
	* Optional: Take the input from keyboard.
	* Take care of the invalid inputs. Exception handling.
	* Get proper result displayed.
		”There are XXX file(s) and XXX folder(s) inside folder XXX with extension XXX.” or something user friendly.


/**
 * @Author: Qihao He
 * @Date: 1/3/2019
 */
package practice;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.NotDirectoryException;

class Criteria{
    private String folderPath;
    private boolean includeSub;
    private Set<String> extensions;
    
    
    public Criteria() {
        this.folderPath = null;
        this.includeSub = false;
        this.extensions = new HashSet<String>();
    }
    
    public Criteria(String fp) {
        this.folderPath = fp;
        this.includeSub = false;
        this.extensions = new HashSet<String>();
    }
    public void setfolderPath(String fp) {
        this.folderPath = fp;
    }
    public String getfolderPath() {
        return this.folderPath;
    }
    public int setincludeSub() throws IOException, NotDirectoryException {
        File file = new File(this.folderPath);
        if(file.isDirectory()) {
            File[] files = file.listFiles(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.isDirectory();
                }
            });
            this.includeSub = files.length > 0 ? true : false;
            return files.length;
        }
        else {
            throw new NotDirectoryException(this.folderPath + " is not directory");
        }
    }
    
    public boolean getincludeSub() {
        return this.includeSub;
    }
    
    public void setextensions(String s) {
        this.extensions.add(s);
    }

    public Set<String> getextensions() {
        return this.extensions;
    }
}

public class Ass2 {
    
    public String count(Criteria criteria) throws IOException, NotDirectoryException {
        int num_files = 0;
        int num_folders = 0;
        
        File file = new File(criteria.getfolderPath());
        
        if(!file.isDirectory()) {
            throw new NotDirectoryException(criteria.getfolderPath() + " is not directory");
        }
        
        File[] files = file.listFiles(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isFile();
            }
        });
        
        for(File f : files) {
            String str = getFileExtension(f);
            if(str.length() > 0) {
                criteria.setextensions(str);
            }
        }
        
        num_files = files.length;
        num_folders = criteria.setincludeSub();
        String ret = "There are " + num_files + " file(s) " + "and " + num_folders + " folder(s) inside folder " + criteria.getfolderPath() + " with extension ";
        return ret;
    }
    
    private String getFileExtension(File file) {
        String name = file.getName();
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf);
    }
    
    
    public static void main(String[] args) throws NotDirectoryException, IOException {
        System.out.println("Enter your folder path: ");
        Scanner in = new Scanner(System.in);
        String s = in.nextLine(); 
      //  System.out.println("You entered input "+s);
        Criteria cri = new Criteria(s);
        Ass2 a = new Ass2();
        String ans = a.count(cri);
        System.out.println(ans);
        for(String str : cri.getextensions()) {
            System.out.println(str);
        }
        
    }
    
}
