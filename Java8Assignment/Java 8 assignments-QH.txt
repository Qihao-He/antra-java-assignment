/** * @Author: Qihao He * @Date: 1/9/2019 */1) Given a list of Objects, write a method that returns a list of all strings that start with the letter 'a' (lower case) and have exactly 3 letters. TIP: Use Java 8 Lambdas and Streams API's./** * @author: Qihao He * @date 01/09/2020 */public class StringWith3Letters {    public List<String> search(List<Person> list) {        //new Person(name, age, sex)        //write the stream logic hear        if (list == null || list.size() == 0) {            return new ArrayList<>();        }        List<String> result = list.stream()        .filter(p -> p.getName().startsWith("a") && p.getName().length() == 3)        .map(Person::getName)        .collect(Collectors.toList());        return result;    }}public class Person {    String name;    int age;    Sex sex;    public Person(String name) {        this.name = name;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}public enum Sex {    male, female;}public class StringWith3LettersTest {    StringWith3Letters sw = new StringWith3Letters();    @Test    public void test0() {        List<Person> input = new ArrayList<>(Arrays.asList(                new Person("a"),                new Person("abc"),                new Person("bca"),                new Person("abd"),                new Person("acds"),                new Person("cscsa"),                new Person("c")        ));        Set<String> exp = new HashSet<>(Arrays.asList("abc","abd"));        assertEquals(exp, new HashSet<>(sw.search(input)));    }}2) Write a method that returns a comma separated string based on a given list of integers. Each element should be preceded by the letter 'e' if the number is even, preceded by the letter 'o' if the number is odd. For example, if the input list is (3,44), the output should be 'o3,e44'.public class ListIntegerToOddEvenString {    public String getString(List<Integer> list) {        //Write the stream logic hear        if (list == null || list.size() == 0) {            return "";        }        return list.stream().map(i -> i % 2 == 0 ? "e" + i : "o" + i)                .collect(Collectors.joining(", "));    }}public class ListIntegerToOddEvenStringTest {    ListIntegerToOddEvenString li = new ListIntegerToOddEvenString();    @Test    public void test0() {        assertEquals("o3, e44",li.getString(new ArrayList<>(Arrays.asList(3, 44))));    }}3) Write a method that returns the average of a list of integers.  /** * @author: Qihao He * @date 01/09/2020 */public class AverageOfListInteger {    public Double average(List<Integer> list) {        //write the stream logic hear        if (list == null || list.size() == 0) {            return Double.valueOf(0);        }        return list.stream().mapToInt((i) -> i)                .summaryStatistics().getAverage();    }}public class AverageOfListIntegerTest {    AverageOfListInteger aol = new AverageOfListInteger();    @Test    public void test0() {        List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29);//        IntSummaryStatistics {count=10, sum=129, min=2, average=12.900000, max=29}        assertEquals(Double.valueOf(12.900000), aol.average(primes));    }}4) Write a method that converts all strings in a list to their upper case./** * @author: Qihao He * @date 01/09/2020 */public class MakeStringUpCase {    public List<String> upperCase(List<String> list) {    //write the stream logic hear        if (list == null || list.size() == 0) {            return new ArrayList<>();        }        return list.stream().map(name -> name.toUpperCase())                .collect(Collectors.toList());    }}public class MakeStringUpCaseTest {    MakeStringUpCase ms = new MakeStringUpCase();    @Test    public void test0() {        List<String> input = Arrays.asList("Ross", "Chandler", "Ross", "Monica", "Joey", "Rachel");        List<String> exp = Arrays.asList("ROSS", "CHANDLER", "ROSS", "MONICA", "JOEY", "RACHEL");        assertEquals(exp, ms.upperCase(input));    }}